{"mappings":"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","sources":["src/main.ts"],"sourcesContent":["import { vec2 } from 'gl-matrix';\n\ninterface Car {\n  // geometry\n  L: number; // distance from rear axle to front axle\n  box_width: number;\n  box_length: number;\n  wheel_width: number;\n  wheel_diameter: number;\n  gauge: number;\n\n  // state\n  x: number; // position of centre of rear axle\n  y: number;\n  theta: number; // car heading in radians from +X\n\n  // control\n  s: number; // speed\n  phi: number; // steer in radians from car's heading\n}\n\nmain();\n\nfunction draw_car_body(ctx: CanvasRenderingContext2D, car: Car) {\n  ctx.strokeRect(\n    -(car.box_length - car.L) / 2,\n    -car.box_width / 2,\n    car.box_length,\n    car.box_width,\n  );\n}\n\nfunction draw_wheel(ctx: CanvasRenderingContext2D, car: Car) {\n  ctx.strokeRect(\n    -car.wheel_diameter / 2,\n    -car.wheel_width / 2,\n    car.wheel_diameter,\n    car.wheel_width,\n  );\n}\n\nfunction paint_car(ctx: CanvasRenderingContext2D, car: Car) {\n  ctx.resetTransform();\n  ctx.clearRect(0, 0, 480, 480);\n\n  ctx.translate(240, 240);\n  ctx.scale(40, -40);\n\n  ctx.lineJoin = 'round';\n\n  const draw_radius = 0.02;\n\n  ctx.lineWidth = draw_radius;\n\n  ctx.translate(car.x, car.y);\n  ctx.rotate(car.theta);\n\n  ctx.beginPath();\n  ctx.arc(0, 0, 0.05, 0, 2 * Math.PI);\n  ctx.fill();\n\n  draw_car_body(ctx, car);\n\n  ctx.save();\n  ctx.translate(0, car.gauge / 2);\n  draw_wheel(ctx, car);\n  ctx.restore();\n\n  ctx.save();\n  ctx.translate(0, -car.gauge / 2);\n  draw_wheel(ctx, car);\n  ctx.restore();\n\n  let outer_wheel_angle = 0;\n  let inner_wheel_angle = 0;\n  let turning_radius = Infinity;\n\n  if (car.phi != 0) {\n    turning_radius = car.L / Math.tan(Math.abs(car.phi));\n\n    outer_wheel_angle =\n      Math.sign(car.phi) * Math.atan(car.L / (turning_radius + car.gauge / 2));\n    inner_wheel_angle =\n      Math.sign(car.phi) * Math.atan(car.L / (turning_radius - car.gauge / 2));\n  }\n\n  ctx.save();\n  ctx.strokeStyle = 'red';\n  ctx.beginPath();\n  if (isFinite(turning_radius)) {\n    ctx.arc(\n      0,\n      Math.sign(car.phi) * turning_radius,\n      turning_radius,\n      0,\n      Math.PI * 2,\n    );\n  } else {\n    ctx.moveTo(-1000, 0);\n    ctx.lineTo(1000, 0);\n  }\n\n  ctx.stroke();\n  ctx.closePath();\n  ctx.restore();\n\n  ctx.save();\n  ctx.translate(car.L, car.gauge / 2);\n  ctx.rotate(car.phi > 0 ? inner_wheel_angle : outer_wheel_angle);\n  draw_wheel(ctx, car);\n  ctx.restore();\n\n  ctx.save();\n  ctx.translate(car.L, -car.gauge / 2);\n  ctx.rotate(car.phi > 0 ? outer_wheel_angle : inner_wheel_angle);\n  draw_wheel(ctx, car);\n  ctx.restore();\n}\n\nfunction main() {\n  const car: Car = {\n    L: 3,\n    box_length: 4,\n    box_width: 2,\n    wheel_width: 0.25,\n    wheel_diameter: 0.75,\n    gauge: 1.5,\n\n    x: 0,\n    y: 0,\n    theta: Math.PI / 2,\n\n    s: 0,\n    phi: 0,\n  };\n\n  const simulation_canvas: HTMLCanvasElement = document.getElementById(\n    'simulation',\n  ) as HTMLCanvasElement;\n  const simulation_ctx = simulation_canvas.getContext('2d');\n\n  if (simulation_ctx) paint_car(simulation_ctx, car);\n\n  let left = false;\n  let right = false;\n  let up = false;\n  let down = false;\n\n  window.addEventListener('keydown', (event) => {\n    if (event.key === 'ArrowLeft') left = true;\n    if (event.key === 'ArrowRight') right = true;\n    if (event.key === 'ArrowUp') up = true;\n    if (event.key === 'ArrowDown') down = true;\n\n    if (left || right || up || down) window.requestAnimationFrame(step);\n  });\n\n  window.addEventListener('keyup', (event) => {\n    if (event.key === 'ArrowLeft') left = false;\n    if (event.key === 'ArrowRight') right = false;\n    if (event.key === 'ArrowUp') up = false;\n    if (event.key === 'ArrowDown') down = false;\n  });\n\n  let start, prev_timestamp;\n  let stale = false;\n\n  function step(timestamp: DOMHighResTimeStamp) {\n    if (start === undefined) {\n      start = timestamp;\n    }\n\n    const elapsed = timestamp - prev_timestamp;\n\n    if (isFinite(elapsed) && prev_timestamp !== timestamp) {\n      if (!stale) {\n        // TODO update car.xy, car.theta according to car.s, car.phi, elapsed\n        car.x += (elapsed / 400) * car.s * Math.cos(car.theta);\n        car.y += (elapsed / 400) * car.s * Math.sin(car.theta);\n        car.theta += (((elapsed / 400) * car.s) / car.L) * Math.tan(car.phi);\n\n        console.log(car.s);\n        console.log(car.theta);\n        console.log(car.x);\n\n        // then update car.s, car.phi according to keyboard input\n        if (left) car.phi += elapsed / 1000;\n        if (right) car.phi -= elapsed / 1000;\n        car.phi = Math.min(car.phi, Math.PI * 0.4);\n        car.phi = Math.max(car.phi, -Math.PI * 0.4);\n\n        if (up) car.s = 1;\n        else if (down) car.s = -1;\n        else car.s = 0;\n      }\n\n      if (simulation_ctx) paint_car(simulation_ctx, car);\n    }\n\n    prev_timestamp = timestamp;\n    if (left || right || up || down) {\n      window.requestAnimationFrame(step);\n      stale = false;\n    } else stale = true;\n  }\n\n  window.requestAnimationFrame(step);\n}\n"],"names":["$ad2bcec7a0192558$var$draw_wheel","ctx","car","strokeRect","wheel_diameter","wheel_width","$ad2bcec7a0192558$var$paint_car","resetTransform","clearRect","translate","scale","lineJoin","lineWidth","x","y","rotate","theta","beginPath","arc","Math","PI","fill","box_length","L","box_width","$ad2bcec7a0192558$var$draw_car_body","save","gauge","restore","outer_wheel_angle","inner_wheel_angle","turning_radius","Infinity","phi","tan","abs","sign","atan","strokeStyle","isFinite","moveTo","lineTo","stroke","closePath","s","simulation_ctx","document","getElementById","getContext","start","prev_timestamp","left","right","up","down","window","addEventListener","event","key","requestAnimationFrame","step","stale","timestamp","undefined","elapsed","cos","sin","console","log","min","max","$ad2bcec7a0192558$var$main"],"version":3,"file":"index.379ce807.js.map"}